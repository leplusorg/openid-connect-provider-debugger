access_log /dev/stdout;

lua_capture_error_log 32m;

init_by_lua_block {
  local errlog = require('ngx.errlog')
  local status, err = errlog.set_filter_level(ngx.DEBUG)
  if not status then
    ngx.log(ngx.ERR, err)
    return
  end
}

lua_package_path '~/lua/?.lua;;';

resolver 8.8.8.8;

lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;

server {

  listen 80;
  server_name localhost;

  location / {
    access_by_lua_block {
      local opts = {
        client_id = (os.getenv('OIDC_CLIENT_ID') and os.getenv('OIDC_CLIENT_ID') or ngx.var.oidc_client_id),
        client_secret = (os.getenv('OIDC_CLIENT_SECRET') and os.getenv('OIDC_CLIENT_SECRET') or  ngx.var.oidc_client_secret)
        discovery = (os.getenv('OIDC_DISCOVERY') and os.getenv('OIDC_DISCOVERY') or  ngx.var.oidc_discovery)
        redirect_uri = (os.getenv('OIDC_REDIRECT_URI') and os.getenv('OIDC_REDIRECT_URI') or  ngx.var.oidc_redirect_uri)
        ssl_verify = (os.getenv('OIDC_SSL_VERIFY') and os.getenv('OIDC_SSL_VERIFY') or (ngx.var.oidc_ssl_verify and ngx.var.oidc_ssl_verify or 'no')),
      }
      local cjson = require('cjson')
      ngx.log(ngx.DEBUG, 'options=' .. cjson.encode(opts))
      local res, err = require('resty.openidc').authenticate(opts)
      if err then
        ngx.log(ngx.ERR, err)
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
	ngx.say(cjson.encode(err))
        ngx.exit(ngx.status)
      end
      if res.access_token:match('^ey[A-Za-z0-9%-_=]+%.ey[A-Za-z0-9%-_=]+(%.[A-Za-z0-9%-_.+/=]+)?$') then
        res.access_token_jwt_decoded = require('resty.jwt').load_jwt(res.access_token)
        ngx.log(ngx.DEBUG, 'access_token=' .. cjson.encode(res.access_token_jwt_decoded))
      elseif res.access_token:match('^ey[A-Za-z0-9%-_=]+$') then
        res.access_token_base64_decoded = ngx.decode_base64(res.access_token:gsub('%-', '+'):gsub('_', '/'))
        ngx.log(ngx.DEBUG, 'access_token=' .. cjson.encode(res.access_token_base64_decoded))
      elseif res.access_token:match('^ey[A-Za-z0-9%+/=]+$') then
        res.access_token_base64_decoded = ngx.decode_base64(res.access_token)
        ngx.log(ngx.DEBUG, 'access_token=' .. cjson.encode(res.access_token_base64_decoded))
      end
      ngx.status = ngx.OK
      ngx.header['Content-Type'] = 'application/json'
      ngx.say(cjson.encode(res))
      ngx.exit(ngx.status)
    }
  }
  
}
