access_log /dev/stdout;

lua_capture_error_log 32m;

error_page 500 /error.html;

lua_package_path '~/lua/?.lua;;';

init_by_lua_block {
  local errlog = require('ngx.errlog')
  local status, err = errlog.set_filter_level(ngx.DEBUG)
  if not status then
    ngx.log(ngx.ERR, err)
    return
  end
  require('resty.session').init({
    remember = true,
    audience = "debugger",
    secret   = "notsecret",
    storage  = "cookie",
  })
}

resolver 127.0.0.11;

lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;

server {

  listen 80;
  server_name localhost;

  large_client_header_buffers 4 32k;

  location ~ ^/(debug|login|logout) {
    access_by_lua_block {
      local r_session = require('resty.session')
      local cjson = require('cjson')
      local opts = {}
      if (ngx.var.arg_code or ngx.var.arg_id_token) then
        if (ngx.var.cookie_session) then
          ngx.log(ngx.DEBUG, 'session=' .. ngx.var.cookie_session)
        else
          ngx.log(ngx.ERR, 'session cookie is missing')
        end
        ngx.log(ngx.DEBUG, 'opening session')
        local session, err, exists = r_session.open()
        if (err) then
          ngx.log(ngx.ERR, 'error opening session: ' .. err)
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.exit(ngx.status)
        end
        if (exists) then
          ngx.log(ngx.DEBUG, 'session.data=' .. cjson.encode(session:get_data()))
        else
          ngx.log(ngx.ERR, 'session was not found')
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.exit(ngx.status)
        end
        opts = {
          client_id = session:get("dbg_client_id"),
          client_secret = session:get("dbg_client_secret"),
          discovery = session:get("dbg_discovery"),
          redirect_uri = session:get("dbg_redirect_uri"),
          ssl_verify = session:get("dbg_ssl_verify"),
          scope = session:get("dbg_scope"),
          post_logout_redirect_uri = session:get("dbg_post_logout_redirect_uri"),
          page_content_type = session:get("dbg_page_content_type")
        }
      else
      	if (ngx.var.arg_oidc_client_id) then
          ngx.log(ngx.DEBUG, 'using oidc_client_id URL parameter value: ' .. ngx.var.arg_oidc_client_id)
          opts.client_id = ngx.unescape_uri(ngx.var.arg_oidc_client_id)
        elseif (os.getenv('oidc_client_id')) then
          ngx.log(ngx.DEBUG, 'using oidc_client_id environment variable value: ' .. os.getenv('oidc_client_id'))
          opts.client_id = os.getenv('oidc_client_id')
        end
      	if (ngx.var.arg_oidc_client_secret) then
          ngx.log(ngx.DEBUG, 'using oidc_client_secret URL parameter value: ' .. ngx.var.arg_oidc_client_secret)
          opts.client_secret = ngx.unescape_uri(ngx.var.arg_oidc_client_secret)
        elseif (os.getenv('oidc_client_secret')) then
          ngx.log(ngx.DEBUG, 'using oidc_client_secret environment variable value: ' .. os.getenv('oidc_client_secret'))
          opts.client_secret = os.getenv('oidc_client_secret')
        end
      	if (ngx.var.arg_oidc_discovery) then
          ngx.log(ngx.DEBUG, 'using oidc_discovery URL parameter value: ' .. ngx.var.arg_oidc_discovery)
          opts.discovery = ngx.unescape_uri(ngx.var.arg_oidc_discovery)
        elseif (os.getenv('oidc_discovery')) then
          ngx.log(ngx.DEBUG, 'using oidc_discovery environment variable value: ' .. os.getenv('oidc_discovery'))
          opts.discovery = os.getenv('oidc_discovery')
        end
      	if (ngx.var.arg_oidc_redirect_uri) then
          ngx.log(ngx.DEBUG, 'using oidc_redirect_uri URL parameter value: ' .. ngx.var.arg_oidc_redirect_uri)
          opts.redirect_uri = ngx.unescape_uri(ngx.var.arg_oidc_redirect_uri)
        elseif (os.getenv('oidc_redirect_uri')) then
          ngx.log(ngx.DEBUG, 'using oidc_redirect_uri environment variable value: ' .. os.getenv('oidc_redirect_uri'))
          opts.redirect_uri = os.getenv('oidc_redirect_uri')
        end
      	if (ngx.var.arg_oidc_ssl_verify) then
          ngx.log(ngx.DEBUG, 'using oidc_ssl_verify URL parameter value: ' .. ngx.var.arg_oidc_ssl_verify)
          opts.ssl_verify = ngx.unescape_uri(ngx.var.arg_oidc_ssl_verify)
        elseif (os.getenv('oidc_ssl_verify')) then
          ngx.log(ngx.DEBUG, 'using oidc_ssl_verify environment variable value: ' .. os.getenv('oidc_ssl_verify'))
          opts.ssl_verify = os.getenv('oidc_ssl_verify')
        else
          opts.ssl_verify = 'no'
        end
        -- Read scope from URL parameter or environment variable
        if (ngx.var.arg_oidc_scope) then
          ngx.log(ngx.DEBUG, 'using oidc_scope URL parameter value: ' .. ngx.var.arg_oidc_scope)
          opts.scope = ngx.unescape_uri(ngx.var.arg_oidc_scope)
        elseif (os.getenv('oidc_scope')) then
          ngx.log(ngx.DEBUG, 'using oidc_scope environment variable value: ' .. os.getenv('oidc_scope'))
          opts.scope = os.getenv('oidc_scope')
        end
        -- Read post_logout_redirect_uri from URL parameter or environment variable
        if (ngx.var.arg_oidc_post_logout_uri) then
          ngx.log(ngx.DEBUG, 'using oidc_post_logout_uri URL parameter value: ' .. ngx.var.arg_oidc_post_logout_uri)
          opts.post_logout_redirect_uri = ngx.unescape_uri(ngx.var.arg_oidc_post_logout_uri)
        elseif (os.getenv('oidc_post_logout_uri')) then
          ngx.log(ngx.DEBUG, 'using oidc_post_logout_uri environment variable value: ' .. os.getenv('oidc_post_logout_uri'))
          opts.post_logout_redirect_uri = os.getenv('oidc_post_logout_uri')
        end
        if (os.getenv('page_content_type')) then
          ngx.log(ngx.DEBUG, 'using page_content_type environment variable value: ' .. os.getenv('page_content_type'))
          opts.page_content_type = os.getenv('page_content_type')
        else
          opts.page_content_type = 'application/json'
        end
      end
      ngx.log(ngx.DEBUG, 'options=' .. cjson.encode(opts))
      if (opts.client_id == nil) then
        ngx.log(ngx.ERR, 'oidc_client_id is not defined')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      if (opts.client_secret == nil) then
        ngx.log(ngx.ERR, 'oidc_client_secret is not defined')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      if (opts.discovery == nil) then
        ngx.log(ngx.ERR, 'oidc_discovery is not defined')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      if (opts.redirect_uri == nil) then
        ngx.log(ngx.ERR, 'oidc_redirect_uri is not defined')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      opts.lifecycle = {}
      opts.lifecycle.on_created = function(session)
          session:set("dbg_client_id", opts.client_id)
          session:set("dbg_client_secret", opts.client_secret)
          session:set("dbg_discovery", opts.discovery)
          session:set("dbg_redirect_uri", opts.redirect_uri)
          session:set("dbg_ssl_verify", opts.ssl_verify)
          session:set("dbg_scope", opts.scope)
          session:set("dbg_post_logout_redirect_uri", opts.post_logout_redirect_uri)
          session:set("dbg_page_content_type", opts.page_content_type)
      end
      local openidc = require('resty.openidc')
      local session_opts = {
        cookie_secure = true,
        cookie_same_site = "None"
      }
      local res, err, target, session = openidc.authenticate(opts, nil, nil, session_opts)
      if err then
        ngx.log(ngx.ERR, err)
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.say(cjson.encode(err))
        ngx.exit(ngx.status)
      end
      -- get the encoded id_token for our debug output
      if session:get("enc_id_token") then
        res.id_token_encoded = session:get("enc_id_token")
        ngx.log(ngx.DEBUG, 'id_token_encoded=' .. res.id_token_encoded)
      end
      local jwt_header = res.access_token:match('^(ey[A-Za-z0-9%-%_%=]+)%.ey[A-Za-z0-9%-%_%=]+')
      if jwt_header then
      	res.access_token_jwt_header_decoded = cjson.decode(ngx.decode_base64(jwt_header:gsub('%-', '+'):gsub('_', '/')))
        ngx.log(ngx.DEBUG, 'access_token_jwt_header_decoded=' .. cjson.encode(res.access_token_jwt_header_decoded))
        res.access_token_jwt_payload_decoded = openidc.jwt_verify(res.access_token, opts)
        ngx.log(ngx.DEBUG, 'access_token_jwt_payload_decoded=' .. cjson.encode(res.access_token_jwt_payload_decoded))
      elseif res.access_token:match('^ey[A-Za-z0-9%-%_%=]+$') then
        res.access_token_base64url_decoded = cjson.decode(ngx.decode_base64(res.access_token:gsub('%-', '+'):gsub('_', '/')))
        ngx.log(ngx.DEBUG, 'access_token_base64url_decoded=' .. cjson.encode(res.access_token_base64url_decoded))
      elseif res.access_token:match('^ey[A-Za-z0-9%+%/%=]+$') then
        res.access_token_base64_decoded = cjson.decode(ngx.decode_base64(res.access_token))
        ngx.log(ngx.DEBUG, 'access_token_base64_decoded=' .. cjson.encode(res.access_token_base64_decoded))
      end
      res.options = opts
      res.options.lifecycle = nil
      ngx.status = ngx.OK
      ngx.header['Content-Type'] = opts.page_content_type
      ngx.say(cjson.encode(res))
      ngx.exit(ngx.status)
    }
  }

  location /status {
    access_by_lua_block {
      local cjson = require('cjson')
      ngx.log(ngx.DEBUG, 'opening session')
      local session, err, exists = r_session.open()
      if (err) then
        ngx.log(ngx.ERR, 'error opening session: ' .. err)
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      if (exists) then
        ngx.log(ngx.DEBUG, 'session.data=' .. cjson.encode(session:get_data()))
      else
        ngx.log(ngx.ERR, 'session was not found')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      local page_content_type = 'application/json'

      if (os.getenv('page_content_type')) then
        ngx.log(ngx.DEBUG, 'using page_content_type environment variable value: ' .. os.getenv('page_content_type'))
        page_content_type = os.getenv('page_content_type')
      end

      -- Check if the session is present and if the user is logged in
      if session:get("id_token") then
        local user_info = session:get("user") -- Assuming user info is stored in session:get("user")
        if user_info and user_info.sub then
          ngx.status = ngx.OK
          ngx.header['Content-Type'] = page_content_type
          ngx.say(cjson.encode({ status = 'authenticated', sub = user_info.sub }))
        else
          ngx.status = ngx.OK
          ngx.header['Content-Type'] = page_content_type
          ngx.say(cjson.encode({ status = 'session_active_but_no_user' }))
        end
      else
        ngx.status = ngx.OK
        ngx.header['Content-Type'] = page_content_type
        ngx.say(cjson.encode({ status = 'not_authenticated' }))
      end
      ngx.exit(ngx.status)
    }
  }

  location /favicon.ico {
    return 204;
  }
  
}
