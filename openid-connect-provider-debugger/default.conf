access_log /dev/stdout;

lua_capture_error_log 32m;

init_by_lua_block {
  local errlog = require('ngx.errlog')
  local status, err = errlog.set_filter_level(ngx.DEBUG)
  if not status then
    ngx.log(ngx.ERR, err)
    return
  end
}

lua_package_path '~/lua/?.lua;;';

resolver 8.8.8.8;

lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;

server {

  listen 80;
  server_name localhost;

  large_client_header_buffers 4 32k;

  set $session_cipher       none;
  set $session_check_ssi    off;
  set $session_check_ua     off;
  set $session_check_scheme off;
  set $session_check_addr   off;

  location /favicon.ico {
    return 204;
  }

  location / {
    access_by_lua_block {
      local cjson = require('cjson')
      local opts = {}
      if (ngx.var.arg_code) then
        ngx.log(ngx.DEBUG, 'opening session')
        local session = require('resty.session').open()
        if (session.present) then
          ngx.log(ngx.DEBUG, 'session.data=' .. cjson.encode(session.data))
	else
          ngx.log(ngx.ERR, 'session is missing')
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.exit(ngx.status)
        end
        opts = {
          client_id = session.data.dbg_client_id,
          client_secret = session.data.dbg_client_secret,
          discovery = session.data.dbg_discovery,
          redirect_uri = session.data.dbg_redirect_uri,
          ssl_verify = session.data.dbg_ssl_verify,
        }
      else
      	if (ngx.var.arg_oidc_client_id) then
          opts.client_id = ngx.unescape_uri(ngx.var.arg_oidc_client_id)
        elseif (os.getenv('oidc_client_id')) then
          opts.client_id = os.getenv('oidc_client_id')
        end
      	if (ngx.var.arg_oidc_client_secret) then
          opts.client_secret = ngx.unescape_uri(ngx.var.arg_oidc_client_secret)
        elseif (os.getenv('oidc_client_secret')) then
          opts.client_secret = os.getenv('oidc_client_secret')
        end
      	if (ngx.var.arg_oidc_discovery) then
          opts.discovery = ngx.unescape_uri(ngx.var.arg_oidc_discovery)
        elseif (os.getenv('oidc_discovery')) then
          opts.discovery = os.getenv('oidc_discovery')
        end
      	if (ngx.var.arg_oidc_redirect_uri) then
          opts.redirect_uri = ngx.unescape_uri(ngx.var.arg_oidc_redirect_uri)
        elseif (os.getenv('oidc_redirect_uri')) then
          opts.redirect_uri = os.getenv('oidc_redirect_uri')
        end
      	if (ngx.var.arg_oidc_ssl_verify) then
          opts.ssl_verify = ngx.unescape_uri(ngx.var.arg_oidc_ssl_verify)
        elseif (os.getenv('oidc_ssl_verify')) then
          opts.ssl_verify = os.getenv('oidc_ssl_verify')
        else
          opts.ssl_verify = 'no'
        end
      end
      ngx.log(ngx.DEBUG, 'options=' .. cjson.encode(opts))
      if (opts.client_id == nil) then
        ngx.log(ngx.ERR, 'oidc_client_id is not defined')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      if (opts.client_secret == nil) then
        ngx.log(ngx.ERR, 'oidc_client_secret is not defined')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      if (opts.discovery == nil) then
        ngx.log(ngx.ERR, 'oidc_discovery is not defined')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      if (opts.redirect_uri == nil) then
        ngx.log(ngx.ERR, 'oidc_redirect_uri is not defined')
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.status)
      end
      opts.lifecycle = {}
      opts.lifecycle.on_created = function(session)
          session.data.dbg_client_id = opts.client_id
          session.data.dbg_client_secret = opts.client_secret
          session.data.dbg_discovery = opts.discovery
          session.data.dbg_redirect_uri = opts.redirect_uri
          session.data.dbg_ssl_verify = opts.ssl_verify
      end
      local res, err, target, session = require('resty.openidc').authenticate(opts)
      if err then
        ngx.log(ngx.ERR, err)
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
	ngx.say(cjson.encode(err))
        ngx.exit(ngx.status)
      end
      if res.access_token:match('^ey[A-Za-z0-9%-_=]+%.ey[A-Za-z0-9%-_=]+(%.[A-Za-z0-9%-_.+/=]+)?$') then
        res.access_token_jwt_decoded = require('resty.jwt').load_jwt(res.access_token)
        ngx.log(ngx.DEBUG, 'access_token=' .. cjson.encode(res.access_token_jwt_decoded))
      elseif res.access_token:match('^ey[A-Za-z0-9%-_=]+$') then
        res.access_token_base64_decoded = ngx.decode_base64(res.access_token:gsub('%-', '+'):gsub('_', '/'))
        ngx.log(ngx.DEBUG, 'access_token=' .. cjson.encode(res.access_token_base64_decoded))
      elseif res.access_token:match('^ey[A-Za-z0-9%+/=]+$') then
        res.access_token_base64_decoded = ngx.decode_base64(res.access_token)
        ngx.log(ngx.DEBUG, 'access_token=' .. cjson.encode(res.access_token_base64_decoded))
      end
      res.options = opts
      res.options.lifecycle = nil
      ngx.status = ngx.OK
      ngx.header['Content-Type'] = 'application/json'
      ngx.say(cjson.encode(res))
      ngx.exit(ngx.status)
    }
  }
  
}
