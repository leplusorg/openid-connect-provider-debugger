access_log /dev/stdout;

lua_capture_error_log 32m;

init_by_lua_block {
  local errlog = require('ngx.errlog')
  local status, err = errlog.set_filter_level(ngx.DEBUG)
  if not status then
    ngx.log(ngx.ERR, err)
    return
  end
}

lua_package_path '~/lua/?.lua;;';

resolver 8.8.8.8;

lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;

server {

  listen 80;
  server_name localhost;

  location / {
    access_by_lua_block {
      local opts = {
        client_id = os.getenv('OIDC_CLIENT_ID'),
        client_secret = os.getenv('OIDC_CLIENT_SECRET'),
        discovery = os.getenv('OIDC_DISCOVERY'),
        redirect_uri = os.getenv('OIDC_REDIRECT_URI'),
        ssl_verify = (os.getenv('OIDC_SSL_VERIFY') and os.getenv('OIDC_SSL_VERIFY') or 'no'),
      }
      local cjson = require('cjson')
      ngx.log(ngx.DEBUG, 'OIDC options: ' .. cjson.encode(opts))
      local res, err = require('resty.openidc').authenticate(opts)
      if err then
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.log(ngx.ERR, err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end
      ngx.status = ngx.OK
      local json = cjson.encode(res)
      ngx.log(ngx.DEBUG, 'IdP response: ' .. json)
      ngx.header['Content-Type'] = 'application/json';
      ngx.say(json)
      ngx.exit(ngx.OK)
    }
  }
  
}
