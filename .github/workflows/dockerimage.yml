---
name: Docker

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Set REPOSITORY
        run: echo "REPOSITORY=${GITHUB_REPOSITORY#*/}" >> "${GITHUB_ENV}"
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
      - uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
      - uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        id: meta
        with:
          images: ${{ github.repository_owner }}/${{ env.REPOSITORY }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=sha
      - uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        if: github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ${{ env.REPOSITORY }}
          platforms: linux/amd64,linux/arm64
          pull: true
          push: ${{ github.ref == 'refs/heads/main' }}
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Test the Docker image
        working-directory: ${{ env.REPOSITORY }}
        run: docker compose -f docker-compose.test.yml run sut
      - name: Set VERSION
        if: github.ref == 'refs/heads/main'
        run: |
          # shellcheck disable=SC2086
          VERSION="$(\grep ${REPOSITORY}/Dockerfile -e '^FROM' | \head -n 1 | \sed -e 's/[-_][^:]*@.*$//; s/^.*://; s/\.\([0-9]\)*$/-\1/;')"
          if [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\-[0-9]+$ ]] ; then
            \echo "VERSION=${VERSION}" >> "${GITHUB_ENV}"
          fi
      - name: Check if release already exists
        if: env.VERSION != ''
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: check-release
        with:
          script: |
            const { VERSION } = process.env
            github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `v${VERSION}`,
            }).then(function(result) {
              core.info(`Release ${result.data.name} found`)
              return result.data.name
            }).catch(function(error) {
              if (error.status === 404) {
                core.info(`Release v${VERSION} not found`)
              } else {
                throw error
              }
            })
          result-encoding: string
      - name: Trigger release
        if: env.VERSION != '' && steps.check-release.outputs.result == 'undefined'
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
